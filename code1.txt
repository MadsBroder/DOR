import React, { useState, useEffect } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  ReferenceLine,
} from 'recharts';
import {
  Target,
  DollarSign,
  Clock,
  AreaChart,
  ListFilter,
  Truck,
  Users,
  BrainCircuit,
  TriangleAlert,
  CheckCircle,
  X,
  RotateCcw,
  Building,
  Rocket,
} from 'lucide-react';

// --- INITIAL STATE DEFINITIONS ---

const NOMINAL_STATE = {
  step: 'Nominal',
  otif: 98.5,
  costToServe: 14.2,
  leadTime: 22,
};
const DISRUPTION_STATE = {
  step: 'Disruption',
  otif: 72.0,
  costToServe: 16.5,
  leadTime: 35.0,
};

const initialKpiData = [NOMINAL_STATE, DISRUPTION_STATE];

const initialTargets = {
  otif: DISRUPTION_STATE.otif,
  costToServe: DISRUPTION_STATE.costToServe,
  leadTime: DISRUPTION_STATE.leadTime,
};

// --- TRADE-OFF LOGIC ---
const TRADEOFFS = {
  otif: { costToServe: 0.5, leadTime: -0.2 },
  costToServe: { otif: 1.5, leadTime: -0.8 },
  leadTime: { otif: -1.0, costToServe: -0.3 },
};

const clamp = (num, min, max) => Math.min(Math.max(num, min), max);

// Easing function for curved projection
const easeOutQuad = (t) => t * (2 - t);

// Interpolate function
const interpolate = (start, end, t) => {
  return start + (end - start) * easeOutQuad(t);
};

// --- HELPER COMPONENTS ---

/**
 * Header Component
 */
const Header = () => (
  <header className="bg-white shadow-md">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="flex justify-between items-center h-16">
        <div className="flex items-center space-x-2">
          <Building className="h-8 w-8 text-red-700" />
          <h1 className="text-2xl font-bold text-gray-800">
            Grundfos Decision Theatre{' '}
            <span className="text-red-700">2040</span>
          </h1>
        </div>
        <div className="text-sm text-gray-500">
          Adaptive Supply Chain Transformation
        </div>
      </div>
    </div>
  </header>
);

/**
 * SingleKpiChart Component
 * Renders an individual chart for one KPI (no background)
 */
const SingleKpiChart = ({
  kpiKey,
  label,
  unit,
  color,
  domain,
  ticks, // New prop for Y-axis ticks
  data, // This is the base data [NOMINAL, DISRUPTION]
  targets,
}) => {
  const nominalVal = data[0][kpiKey];
  const disruptionVal = data[1][kpiKey];
  const targetVal = targets[kpiKey];

  // Generate the 6-point chart data
  const chartData = [
    {
      step: 'Nominal',
      nominal: nominalVal,
      projection: nominalVal,
    },
    {
      step: 'Disruption',
      nominal: nominalVal,
      projection: disruptionVal, // This is the immediate jump
    },
    {
      step: '+1 wk',
      nominal: nominalVal,
      projection: interpolate(disruptionVal, targetVal, 0.25),
    },
    {
      step: '+2 wks',
      nominal: nominalVal,
      projection: interpolate(disruptionVal, targetVal, 0.50),
    },
    {
      step: '+3 wks',
      nominal: nominalVal,
      projection: interpolate(disruptionVal, targetVal, 0.75),
    },
    {
      step: '+4 wks',
      nominal: nominalVal,
      projection: targetVal,
    },
  ];

  return (
    <div className="h-[250px] flex flex-col">
      <h3 className="text-lg font-bold text-gray-900 mb-4 px-6 pt-6">
        {label} Projection
      </h3>
      <div className="flex-1">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart
            data={chartData}
            margin={{ top: 5, right: 30, left: 0, bottom: 5 }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="step" />
            <YAxis domain={domain} unit={unit} ticks={ticks} />
            <Tooltip />
            <Legend
              verticalAlign="top"
              wrapperStyle={{ top: 35, right: 30 }}
            />
            {/* The "Nominal" baseline */}
            <Line
              type="monotone"
              dataKey="nominal"
              stroke="#a0aec0"
              strokeWidth={2}
              name="Nominal"
              strokeDasharray="5 5"
              dot={false}
            />
            {/* The "Projection" line that shows disruption and target */}
            <Line
              type="monotone"
              dataKey="projection"
              stroke={color}
              strokeWidth={3}
              name="Projection"
            />
            {/* Vertical "Disruption Point" line */}
            <ReferenceLine
              x="Disruption"
              stroke="#9ca3af"
              strokeDasharray="3 3"
              ifOverflow="visible" // <-- FIX: Ensures line is always visible
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

/**
 * KpiSlider Component
 * Renders an individual slider for one KPI target (no background)
 */
const KpiSlider = ({
  kpiKey,
  label,
  icon,
  value,
  min,
  max,
  step,
  unit,
  color,
  onChange,
  disabled,
}) => {
  const IconComponent = icon;
  return (
    <div className="p-6">
      <div className="space-y-2">
        <div className="flex justify-between items-center">
          <label className={`font-semibold text-gray-700`}>
            <IconComponent
              className={`h-5 w-5 inline-block -mt-1 mr-2`}
              style={{ color: color }} // Apply color directly
            />
            {label} Target
          </label>
          <span className={`text-xl font-bold text-gray-900`}>
            {value.toFixed(1)} {unit}
          </span>
        </div>
        <input
          type="range"
          min={min}
          max={max}
          step={step}
          value={value}
          disabled={disabled}
          onChange={(e) => onChange(kpiKey, e.target.value)}
          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer disabled:cursor-not-allowed"
          style={{ accentColor: color }}
        />
      </div>
    </div>
  );
};

/**
 * KpiPod Component
 * A wrapper that groups a chart and its slider, matching the new layout.
 */
const KpiPod = ({
  kpiKey,
  label,
  unit,
  color,
  domain,
  ticks, // New prop
  icon,
  min,
  max,
  step,
  data,
  targets,
  onChange,
  disabled,
}) => (
  <div className="bg-white shadow-lg rounded-lg overflow-hidden flex flex-col justify-between">
    <SingleKpiChart
      kpiKey={kpiKey}
      label={label}
      unit={unit}
      color={color}
      domain={domain}
      ticks={ticks} // Pass to chart
      data={data}
      targets={targets}
    />
    <div className="border-t border-gray-200">
      <KpiSlider
        kpiKey={kpiKey}
        label={label}
        icon={icon}
        value={targets[kpiKey]}
        min={min}
        max={max}
        step={step}
        unit={unit}
        color={color}
        onChange={onChange}
        disabled={disabled}
      />
    </div>
  </div>
);

/**
 * Decision Areas Component
 * Shows the *animated result* of the simulation run in a horizontal grid.
 */
const DecisionAreas = ({ executionStep }) => {
  const areas = [
    {
      key: 'meio',
      title: 'MEIO (Inventory)',
      description:
        'Adjusting multi-echelon inventory buffers to protect service levels...',
      icon: AreaChart,
      step: 1,
    },
    {
      key: 'atp',
      title: 'Dynamic ATP/CTP (Promising)',
      description:
        'Re-calculating constraint-based promising logic for all orders...',
      icon: ListFilter,
      step: 2,
    },
    {
      key: 'logistics',
      title: 'Logistics Rerouting',
      description:
        'Simulating and booking optimal logistics (sea vs. air freight)...',
      icon: Truck,
      step: 3,
    },
    {
      key: 'partner',
      title: 'Partner Collaboration',
      description:
        'Triggering automated confirmations with alternate suppliers...',
      icon: Users,
      step: 4,
    },
    {
      key: 'execution',
      title: 'Issue New Orders',
      description:
        'Issuing updated production and purchase orders to plants & partners...',
      icon: BrainCircuit,
      step: 5,
    },
  ];

  const getStatus = (step) => {
    if (executionStep > step) {
      return {
        label: 'Completed',
        bg: 'bg-green-100',
        border: 'border-green-300',
        iconBg: 'bg-green-200',
        text: 'text-green-800',
      };
    }
    if (executionStep === step) {
      return {
        label: 'Running...',
        bg: 'bg-blue-100',
        border: 'border-blue-500 shadow-lg animate-pulse',
        iconBg: 'bg-blue-200',
        text: 'text-blue-800',
      };
    }
    return {
      label: 'Pending',
      bg: 'bg-gray-100',
      border: 'border-gray-200',
      iconBg: 'bg-gray-200',
      text: 'text-gray-500',
    };
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
      {areas.map((area) => {
        const status = getStatus(area.step);
        const IconComponent = area.icon;
        return (
          <div
            key={area.key}
            className={`p-4 rounded-lg border-2 ${status.bg} ${status.border} transition-all duration-300`}
          >
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center space-x-3">
                <div
                  className={`flex-shrink-0 p-2 rounded-full ${status.iconBg}`}
                >
                  <IconComponent className="h-6 w-6" />
                </div>
                <p className="font-semibold text-gray-900">{area.title}</p>
              </div>
              <span
                className={`px-2 py-0.5 rounded-full text-xs font-medium ${status.bg} ${status.text} border ${status.border}`}
              >
                {status.label}
              </span>
            </div>
            <p className={`text-sm ${status.text} pl-11`}>
              {area.description}
            </p>
          </div>
        );
      })}
    </div>
  );
};

/**
 * Modal Component
 */
const Modal = ({ contentKey, onClose }) => {
  const content = {
    start: {
      icon: <TriangleAlert className="h-16 w-16 text-red-600" />,
      title: 'Scenario: "Disruption and Response—2040"',
      body: (
        <div className="space-y-4">
          <p>
            You are the Grundfos OPS Council. A sudden Tier-2 supplier fire
            threatens to halt production, delaying key customer deliveries and
            spiking costs.
          </p>
          <div className="bg-red-100 p-4 rounded-lg border border-red-200">
            <h4 className="font-bold text-red-800">DISRUPTION DETECTED</h4>
            <div className="flex justify-around mt-2">
              <p>
                OTIF: <span className="font-bold">98.5% ➔ 72.0%</span>
              </p>
              <p>
                Cost: <span className="font-bold">14.2% ➔ 16.5%</span>
              </p>
              <p>
                Lead Time: <span className="font-bold">22 ➔ 35 days</span>
              </p>
            </div>
          </div>
          <p className="font-semibold">
            Your goal: Use the Target Setting levers to find an acceptable
            trade-off. Then, run the simulation to see how the 2040 system
            executes it.
          </p>
        </div>
      ),
      buttonText: 'Start Simulation',
    },
    debrief: {
      icon: <CheckCircle className="h-16 w-16 text-green-600" />,
      title: 'Synthesis: The Adaptive Supply Chain',
      body: (
        <div className="space-y-4">
          <p>
            The automated execution engine has successfully implemented your
            plan. The combination of digital capabilities achieved your desired
            targets.
          </p>

          <div className="space-y-3">
            <div>
              <h4 className="font-bold text-gray-800">
                Key Capabilities Used:
              </h4>
              <ul className="list-disc list-outside pl-5 text-sm space-y-1 mt-2">
                <li>
                  <strong>Intelligent & Adaptive Planning:</strong>{' '}
                  Constraint-based APS, digital twins for what-if.
                </li>
                <li>
                  <strong>Connected & Collaborative Ecosystem:</strong>{' '}
                  Real-time coordination and shared workflows with partners.
                </li>
                <li>
                  <strong>Agile & Automated Execution:</strong> Dynamic
                  logistics rerouting and real-time tracking.
                </li>
              </ul>
            </div>
          </div>

          <div className="bg-red-50 p-4 rounded-lg border border-red-200">
            <h4 className="font-bold text-red-800">
              Final Question for the Council:
            </h4>
            <p className="mt-2">
              "Seeing what's possible, what level of ambition do we want to
              commit to for the Adaptive Supply Chain transformation?"
            </p>
          </div>
        </div>
      ),
      buttonText: 'Close & Reset',
    },
  };

  const current = content[contentKey];
  if (!current) return null;

  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-2xl max-w-3xl w-full mx-auto overflow-hidden">
        <div className="p-8">
          <div className="flex justify-between items-start">
            <div className="flex space-x-4">
              <div className="flex-shrink-0">{current.icon}</div>
              <div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">
                  {current.title}
                </h2>
                <div className="text-sm text-gray-600">{current.body}</div>
              </div>
            </div>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>
        <div className="bg-gray-50 px-8 py-4 flex justify-end">
          <button
            onClick={onClose}
            className="px-6 py-2 rounded-lg bg-red-700 text-white font-semibold
                       transition-all duration-200 hover:bg-red-800"
          >
            {current.buttonText}
          </button>
        </div>
      </div>
    </div>
  );
};

// --- MAIN APP COMPONENT ---

export default function App() {
  const [kpiData, setKpiData] = useState(initialKpiData);
  const [targets, setTargets] = useState(initialTargets);
  const [modalContent, setModalContent] = useState(null);
  const [simState, setSimState] = useState('idle'); // 'idle', 'adjusting', 'running', 'finished'
  const [executionStep, setExecutionStep] = useState(0); // 0-5

  // Show start modal on load
  useEffect(() => {
    setModalContent('start');
  }, []);

  const handleModalClose = () => {
    if (modalContent === 'start') {
      setModalContent(null);
      setSimState('adjusting');
    } else if (modalContent === 'debrief') {
      setModalContent(null);
      resetSimulation();
    }
  };

  const resetSimulation = () => {
    setKpiData(initialKpiData);
    setTargets(initialTargets);
    setSimState('idle');
    setExecutionStep(0);
    setModalContent('start');
  };

  // This function now handles all trade-offs
  const handleTargetChange = (key, value) => {
    if (simState !== 'adjusting') return;

    const numValue = parseFloat(value);
    const delta = numValue - targets[key];

    let newTargets = { ...targets, [key]: numValue };

    // Apply trade-offs
    if (key === 'otif') {
      newTargets.costToServe = clamp(
        targets.costToServe + delta * TRADEOFFS.otif.costToServe,
        10,
        25
      );
      newTargets.leadTime = clamp(
        targets.leadTime + delta * TRADEOFFS.otif.leadTime,
        15,
        40
      );
    } else if (key === 'costToServe') {
      newTargets.otif = clamp(
        targets.otif + delta * TRADEOFFS.costToServe.otif,
        70,
        100
      );
      newTargets.leadTime = clamp(
        targets.leadTime + delta * TRADEOFFS.costToServe.leadTime,
        15,
        40
      );
    } else if (key === 'leadTime') {
      newTargets.otif = clamp(
        targets.otif + delta * TRADEOFFS.leadTime.otif,
        70,
        100
      );
      newTargets.costToServe = clamp(
        targets.costToServe + delta * TRADEOFFS.leadTime.costToServe,
        10,
        25
      );
    }

    setTargets(newTargets);
  };

  const runSimulation = () => {
    setSimState('running');
    setExecutionStep(1);

    setTimeout(() => setExecutionStep(2), 1500);
    setTimeout(() => setExecutionStep(3), 3000);
    setTimeout(() => setExecutionStep(4), 4500);
    setTimeout(() => setExecutionStep(5), 6000);
    setTimeout(() => {
      setExecutionStep(6); // Finished
      setSimState('finished');
      setTimeout(() => setModalContent('debrief'), 1000);
    }, 7500);
  };

  // Define colors for consistency
  const colors = {
    otif: '#3B82F6',
    costToServe: '#10B981',
    leadTime: '#F59E0B',
  };

  // Define domains and ticks for charts
  const kpiChartConfig = {
    costToServe: {
      domain: [10, 25],
      ticks: [10, 15, 20, 25],
      color: colors.costToServe,
    },
    otif: {
      domain: [60, 100],
      ticks: [60, 70, 80, 90, 100],
      color: colors.otif,
    },
    leadTime: {
      domain: [15, 40],
      ticks: [15, 20, 25, 30, 35, 40],
      color: colors.leadTime,
    },
  };

  return (
    <div className="min-h-screen bg-gray-100 font-inter">
      {modalContent && (
        <Modal contentKey={modalContent} onClose={handleModalClose} />
      )}
      <Header />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Step 1: KPI Pods */}
          <div>
            <h2 className="text-2xl font-bold text-gray-800 mb-6">
              Step 1: Set KPI Targets (The Trade-Off)
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Cost-to-Serve Pod */}
              <KpiPod
                kpiKey="costToServe"
                label="Cost-to-Serve"
                unit="%"
                color={kpiChartConfig.costToServe.color}
                domain={kpiChartConfig.costToServe.domain}
                ticks={kpiChartConfig.costToServe.ticks}
                icon={DollarSign}
                min={10}
                max={25}
                step={0.1}
                data={kpiData}
                targets={targets}
                onChange={handleTargetChange}
                disabled={simState !== 'adjusting'}
              />

              {/* OTIF Pod */}
              <KpiPod
                kpiKey="otif"
                label="OTIF"
                unit="%"
                color={kpiChartConfig.otif.color}
                domain={kpiChartConfig.otif.domain}
                ticks={kpiChartConfig.otif.ticks}
                icon={Target}
                min={70}
                max={100}
                step={0.5}
                data={kpiData}
                targets={targets}
                onChange={handleTargetChange}
                disabled={simState !== 'adjusting'}
              />

              {/* Lead Time Pod */}
              <KpiPod
                kpiKey="leadTime"
                label="Avg. Lead Time"
                unit=" days"
                color={kpiChartConfig.leadTime.color}
                domain={kpiChartConfig.leadTime.domain}
                ticks={kpiChartConfig.leadTime.ticks}
                icon={Clock}
                min={15}
                max={40}
                step={0.5}
                data={kpiData}
                targets={targets}
                onChange={handleTargetChange}
                disabled={simState !== 'adjusting'}
              />
            </div>
          </div>

          {/* Control Button */}
          <div className="pt-6 border-t border-gray-200">
            <button
              onClick={runSimulation}
              disabled={simState !== 'adjusting'}
              className="w-full max-w-lg mx-auto p-4 rounded-lg bg-red-700 text-white font-bold flex items-center justify-center space-x-2
                         transition-all duration-200 hover:bg-red-800
                         disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              <Rocket className="h-6 w-6" />
              <span>Confirm Targets & Run Simulation</span>
            </button>
          </div>

          {/* Step 2: Execution Steps */}
          <div>
            <h2 className="text-2xl font-bold text-gray-800 mb-6">
              Step 2: Automated Decision & Execution
            </h2>
            <DecisionAreas executionStep={executionStep} />
          </div>
        </div>
      </main>
    </div>
  );
}

